{"version":3,"sources":["components/TodoForm.js","components/EditForm.js","components/TodoTask.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","id","className","onSubmit","e","trim","preventDefault","timeStr","Date","now","setTodosArr","todosArr","text","parseInt","isCompleted","addTodo","type","value","placeholder","name","onChange","target","ref","maxLength","EditForm","prevText","isHidden","editTodoTaskText","onClick","hide","TodoTask","setIsHidden","changeTodoTaskText","newText","completionStatus","updatedTodo","task","filteredArr","filter","todo","updatedArr","toggleHiddenTodoForm","console","log","subtractedArr","todoList","todoLis","ea","map","completedTodosExist","completedLis","thingsCompleted","length","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef7e233a.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\n\nexport default function TodoForm(props) {\n    const [input,setInput] = useState(\"\");\n\n    const inputRef = useRef(null);\n\n    useEffect( ()=>{inputRef.current.focus()} );\n\n    const addTodo = () => {\n        const timeStr = Date.now();\n        props.setTodosArr([...props.todosArr,{\n            text : input,\n            id : parseInt(timeStr),\n            isCompleted : false\n        }]);\n    }\n\n    const handleChange = e => {\n        setInput(e.target.value)\n    };\n\n    const handleSubmit = e => {\n        setInput(input.trim())\n        e.preventDefault();\n        addTodo();\n        setInput(\"\");\n    }\n\n    return (\n        <div id=\"add-todo-form-container\">\n            <form className=\"task-form\" onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={input}\n                    placeholder=\"Description Here\"\n                    name=\"description\"\n                    className=\"form-input-box\"\n                    onChange={handleChange}\n                    ref={inputRef}\n                    maxLength=\"50\"\n                />\n                <button id=\"add-todo-form-button\">Add New</button>\n            </form>\n        </div>\n    )\n}\n\n","import React, {useState} from 'react';\n\nexport default function EditForm(props) {\n\n    //dont forget to add props in input above\n    // cancel button\n    // submit changes button\n    // form \n        // needs initial value of previous todo text\n        // placeholder says new decription here\n    \n    const [input,setInput] = useState(props.prevText)\n\n    const handleChange = (e) => {\n        setInput(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setInput(input.trim())\n        //send input back to todo as parameter to be used in a todo function \n        props.editTodoTaskText(input);\n        //that will amp thru todos arr and make a dupl array sans todo with id of the edit todo\n        // then add the edited todo(same id , new text), and reassign todos arr value to dupl arr\n    }\n\n    return (\n        <div className={props.isHidden ? \"todo-edit-form-hidden\" : \"todo-edit-form-invisible\"}>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    <input \n                        type=\"text\" \n                        name=\"text\" \n                        placeholder=\"Add changes here\"\n                        value={input}\n                        onChange={handleChange}\n                        maxLength=\"50\"\n                    />\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>\n                <button type=\"button\" onClick={props.hide}>Cancel</button>\n            </form>\n        </div>\n    )\n}\n","import React, {useState} from 'react'\nimport EditForm from \"./EditForm\"\n\nexport default function TodoTask(props) {\n    const [isHidden,setIsHidden] = useState(true);\n\n    const deleteTodoTask = () => {\n        let subtractedArr = props.todosArr.filter(todo => todo.id !== props.task.id);\n        props.setTodosArr(subtractedArr);\n\n    }\n\n    const editTodoTaskText = (newText,completionStatus=false) => {\n        changeTodoTaskText(newText,completionStatus=false);\n        toggleHiddenTodoForm();\n    }\n\n    const changeTodoTaskText = (newText,completionStatus=false) => {\n\n        const updatedTodo = {\n            text : newText,\n            id : props.task.id,\n            isCompleted : completionStatus\n        };\n        const filteredArr = props.todosArr.filter(todo => todo.id !== props.task.id);\n        const updatedArr = [updatedTodo, ...filteredArr];\n        props.setTodosArr(updatedArr);\n        \n    }\n\n    const taskCompletionToggled = () => {\n        changeTodoTaskText(props.task.text, !props.task.isCompleted);\n        console.log(props.task.isCompleted)\n        // change the task.isCompleted to opposite\n        // or nvm completed UL > Li will have strike through style\n    } \n\n    const toggleHiddenTodoForm = () => {\n        setIsHidden(!isHidden);\n    }\n\n    return (\n        <li>\n            <div className=\"div-todo-text-btns-containers\">\n                <div \n                    className={props.task.isCompleted ? \"completed-text\" : \"todo-text\" } \n                    onClick={taskCompletionToggled}\n                >\n                    <p>{props.task.text}</p>\n                </div>\n\n                <div className=\"todo-buttons-div\">\n                    <button\n                        onClick={deleteTodoTask}\n                        className=\"todo-buttons\"\n                    >\n                        ✘\n                    </button>\n                    <button className=\"todo-buttons\" onClick={toggleHiddenTodoForm}>✎</button>\n                </div> \n            </div>\n            \n            <EditForm \n                isHidden={isHidden} \n                hide={toggleHiddenTodoForm} \n                prevText={props.task.text}\n                editTodoTaskText={editTodoTaskText}\n            />\n        </li>\n    )\n}\n","import React from 'react'\nimport TodoTask from \"./TodoTask\"\n\nexport default function todoList(props) {\n    const todoLis = props.todosArr.filter(ea => ea.isCompleted === false).map(task => \n        <TodoTask \n            key={task.id} \n            task={task} \n            setTodosArr={props.setTodosArr} \n            todosArr={props.todosArr}\n        />\n    );\n    const completedTodosExist = props.todosArr.filter(ea => ea.isCompleted === true)\n    \n    const completedLis = completedTodosExist.map(task => \n        <TodoTask \n            key={task.id} \n            task={task} \n            setTodosArr={props.setTodosArr} \n            todosArr={props.todosArr}\n        />\n    );\n\n    const thingsCompleted = <h1 id=\"things-completed\">{completedTodosExist.length === 0 ? \"\" : \"Completed\"}</h1>\n\n    return (\n        <div>\n            <ul>{todoLis}</ul>\n            \n            {thingsCompleted}\n            \n            <ul id=\"completed-todos-ul\">{completedLis}</ul>\n        </div>\n\n    )\n}\n","import './App.css';\nimport React, {useState} from 'react';\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  const [todosArr,setTodosArr] = useState([])\n\n  return (\n    <div className=\"App\">\n      <header><h1>Things To Do List</h1></header>\n      <TodoForm setTodosArr={setTodosArr} todosArr={todosArr}/>\n      <br />\n      <TodoList setTodosArr={setTodosArr} todosArr={todosArr}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}